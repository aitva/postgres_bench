// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: query.sql

package pgx

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createPage = `-- name: CreatePage :exec
INSERT INTO pages (id, updated_at, title, text)
VALUES ($1, $2, $3, $4)
`

type CreatePageParams struct {
	ID        pgtype.UUID
	UpdatedAt pgtype.Timestamp
	Title     string
	Text      string
}

func (q *Queries) CreatePage(ctx context.Context, arg CreatePageParams) error {
	_, err := q.db.Exec(ctx, createPage,
		arg.ID,
		arg.UpdatedAt,
		arg.Title,
		arg.Text,
	)
	return err
}

const getPage = `-- name: GetPage :one
SELECT id, updated_at, title, text FROM pages WHERE id = $1
`

func (q *Queries) GetPage(ctx context.Context, id pgtype.UUID) (Page, error) {
	row := q.db.QueryRow(ctx, getPage, id)
	var i Page
	err := row.Scan(
		&i.ID,
		&i.UpdatedAt,
		&i.Title,
		&i.Text,
	)
	return i, err
}

const listIDs = `-- name: ListIDs :many
SELECT id FROM pages
WHERE $1::uuid IS NULL OR id > $1
LIMIT 1000
`

func (q *Queries) ListIDs(ctx context.Context, cursor pgtype.UUID) ([]pgtype.UUID, error) {
	rows, err := q.db.Query(ctx, listIDs, cursor)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []pgtype.UUID
	for rows.Next() {
		var id pgtype.UUID
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPage = `-- name: ListPage :many
SELECT id, updated_at, title, text FROM pages
`

func (q *Queries) ListPage(ctx context.Context) ([]Page, error) {
	rows, err := q.db.Query(ctx, listPage)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Page
	for rows.Next() {
		var i Page
		if err := rows.Scan(
			&i.ID,
			&i.UpdatedAt,
			&i.Title,
			&i.Text,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
